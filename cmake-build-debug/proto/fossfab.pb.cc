// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fossfab.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fossfab.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FossFab {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_CommandCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Slice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Slice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Triangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Triangle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadPosition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fossfab_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_fossfab_2eproto() {
  protobuf_AddDesc_fossfab_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fossfab.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, extrude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, slices_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      -1,
      -1,
      -1,
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _is_default_instance_));
  Command_CommandCode_descriptor_ = Command_descriptor_->enum_type(0);
  Slice_descriptor_ = file->message_type(1);
  static const int Slice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, positions_),
  };
  Slice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Slice_descriptor_,
      Slice::default_instance_,
      Slice_offsets_,
      -1,
      -1,
      -1,
      sizeof(Slice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _is_default_instance_));
  Triangle_descriptor_ = file->message_type(2);
  static const int Triangle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, vertex1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, vertex2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, vertex3_),
  };
  Triangle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Triangle_descriptor_,
      Triangle::default_instance_,
      Triangle_offsets_,
      -1,
      -1,
      -1,
      sizeof(Triangle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, _is_default_instance_));
  Mesh_descriptor_ = file->message_type(3);
  static const int Mesh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, triangles_),
  };
  Mesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mesh_descriptor_,
      Mesh::default_instance_,
      Mesh_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _is_default_instance_));
  Vector3_descriptor_ = file->message_type(4);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _is_default_instance_));
  HeadPosition_descriptor_ = file->message_type(5);
  static const int HeadPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadPosition, pos_),
  };
  HeadPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeadPosition_descriptor_,
      HeadPosition::default_instance_,
      HeadPosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeadPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadPosition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadPosition, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fossfab_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Slice_descriptor_, &Slice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Triangle_descriptor_, &Triangle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mesh_descriptor_, &Mesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeadPosition_descriptor_, &HeadPosition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fossfab_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Slice::default_instance_;
  delete Slice_reflection_;
  delete Triangle::default_instance_;
  delete Triangle_reflection_;
  delete Mesh::default_instance_;
  delete Mesh_reflection_;
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete HeadPosition::default_instance_;
  delete HeadPosition_reflection_;
}

void protobuf_AddDesc_fossfab_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_fossfab_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfossfab.proto\022\007FossFab\"\216\002\n\007Command\0222\n\014"
    "command_code\030\001 \001(\0162\034.FossFab.Command.Com"
    "mandCode\022(\n\tpositions\030\002 \003(\0132\025.FossFab.He"
    "adPosition\022\033\n\004mesh\030\003 \001(\0132\r.FossFab.Mesh\022"
    "\017\n\007extrude\030\004 \001(\010\022\036\n\006slices\030\005 \003(\0132\016.FossF"
    "ab.Slice\"W\n\013CommandCode\022\010\n\004MOVE\020\000\022\017\n\013REN"
    "DER_MESH\020\001\022\017\n\013RENDER_PATH\020\002\022\021\n\rRENDER_SL"
    "ICES\020\003\022\t\n\005RESET\020\004\",\n\005Slice\022#\n\tpositions\030"
    "\001 \003(\0132\020.FossFab.Vector3\"s\n\010Triangle\022!\n\007v"
    "ertex1\030\001 \001(\0132\020.FossFab.Vector3\022!\n\007vertex"
    "2\030\002 \001(\0132\020.FossFab.Vector3\022!\n\007vertex3\030\003 \001"
    "(\0132\020.FossFab.Vector3\",\n\004Mesh\022$\n\ttriangle"
    "s\030\001 \003(\0132\021.FossFab.Triangle\"*\n\007Vector3\022\t\n"
    "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"-\n\014HeadPo"
    "sition\022\035\n\003pos\030\001 \001(\0132\020.FossFab.Vector3b\006p"
    "roto3", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fossfab.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  Slice::default_instance_ = new Slice();
  Triangle::default_instance_ = new Triangle();
  Mesh::default_instance_ = new Mesh();
  Vector3::default_instance_ = new Vector3();
  HeadPosition::default_instance_ = new HeadPosition();
  Command::default_instance_->InitAsDefaultInstance();
  Slice::default_instance_->InitAsDefaultInstance();
  Triangle::default_instance_->InitAsDefaultInstance();
  Mesh::default_instance_->InitAsDefaultInstance();
  Vector3::default_instance_->InitAsDefaultInstance();
  HeadPosition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fossfab_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fossfab_2eproto {
  StaticDescriptorInitializer_fossfab_2eproto() {
    protobuf_AddDesc_fossfab_2eproto();
  }
} static_descriptor_initializer_fossfab_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_CommandCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_CommandCode_descriptor_;
}
bool Command_CommandCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Command_CommandCode Command::MOVE;
const Command_CommandCode Command::RENDER_MESH;
const Command_CommandCode Command::RENDER_PATH;
const Command_CommandCode Command::RENDER_SLICES;
const Command_CommandCode Command::RESET;
const Command_CommandCode Command::CommandCode_MIN;
const Command_CommandCode Command::CommandCode_MAX;
const int Command::CommandCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCommandCodeFieldNumber;
const int Command::kPositionsFieldNumber;
const int Command::kMeshFieldNumber;
const int Command::kExtrudeFieldNumber;
const int Command::kSlicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FossFab.Command)
}

void Command::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  mesh_ = const_cast< ::FossFab::Mesh*>(&::FossFab::Mesh::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FossFab.Command)
}

void Command::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  command_code_ = 0;
  mesh_ = NULL;
  extrude_ = false;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:FossFab.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete mesh_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fossfab_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:FossFab.Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(command_code_, extrude_);
  if (GetArenaNoVirtual() == NULL && mesh_ != NULL) delete mesh_;
  mesh_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  positions_.Clear();
  slices_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FossFab.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FossFab.Command.CommandCode command_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command_code(static_cast< ::FossFab::Command_CommandCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_positions;
        break;
      }

      // repeated .FossFab.HeadPosition positions = 2;
      case 2: {
        if (tag == 18) {
         parse_positions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_positions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_mesh;
        break;
      }

      // optional .FossFab.Mesh mesh = 3;
      case 3: {
        if (tag == 26) {
         parse_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_extrude;
        break;
      }

      // optional bool extrude = 4;
      case 4: {
        if (tag == 32) {
         parse_extrude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extrude_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_slices;
        break;
      }

      // repeated .FossFab.Slice slices = 5;
      case 5: {
        if (tag == 42) {
         parse_slices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_slices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_slices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_slices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FossFab.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FossFab.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FossFab.Command)
  // optional .FossFab.Command.CommandCode command_code = 1;
  if (this->command_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command_code(), output);
  }

  // repeated .FossFab.HeadPosition positions = 2;
  for (unsigned int i = 0, n = this->positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->positions(i), output);
  }

  // optional .FossFab.Mesh mesh = 3;
  if (this->has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mesh_, output);
  }

  // optional bool extrude = 4;
  if (this->extrude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->extrude(), output);
  }

  // repeated .FossFab.Slice slices = 5;
  for (unsigned int i = 0, n = this->slices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->slices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:FossFab.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FossFab.Command)
  // optional .FossFab.Command.CommandCode command_code = 1;
  if (this->command_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command_code(), target);
  }

  // repeated .FossFab.HeadPosition positions = 2;
  for (unsigned int i = 0, n = this->positions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->positions(i), false, target);
  }

  // optional .FossFab.Mesh mesh = 3;
  if (this->has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mesh_, false, target);
  }

  // optional bool extrude = 4;
  if (this->extrude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->extrude(), target);
  }

  // repeated .FossFab.Slice slices = 5;
  for (unsigned int i = 0, n = this->slices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->slices(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FossFab.Command)
  return target;
}

int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FossFab.Command)
  int total_size = 0;

  // optional .FossFab.Command.CommandCode command_code = 1;
  if (this->command_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_code());
  }

  // optional .FossFab.Mesh mesh = 3;
  if (this->has_mesh()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mesh_);
  }

  // optional bool extrude = 4;
  if (this->extrude() != 0) {
    total_size += 1 + 1;
  }

  // repeated .FossFab.HeadPosition positions = 2;
  total_size += 1 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }

  // repeated .FossFab.Slice slices = 5;
  total_size += 1 * this->slices_size();
  for (int i = 0; i < this->slices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slices(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FossFab.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FossFab.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FossFab.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FossFab.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  positions_.MergeFrom(from.positions_);
  slices_.MergeFrom(from.slices_);
  if (from.command_code() != 0) {
    set_command_code(from.command_code());
  }
  if (from.has_mesh()) {
    mutable_mesh()->::FossFab::Mesh::MergeFrom(from.mesh());
  }
  if (from.extrude() != 0) {
    set_extrude(from.extrude());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FossFab.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FossFab.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(command_code_, other->command_code_);
  positions_.UnsafeArenaSwap(&other->positions_);
  std::swap(mesh_, other->mesh_);
  std::swap(extrude_, other->extrude_);
  slices_.UnsafeArenaSwap(&other->slices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional .FossFab.Command.CommandCode command_code = 1;
void Command::clear_command_code() {
  command_code_ = 0;
}
 ::FossFab::Command_CommandCode Command::command_code() const {
  // @@protoc_insertion_point(field_get:FossFab.Command.command_code)
  return static_cast< ::FossFab::Command_CommandCode >(command_code_);
}
 void Command::set_command_code(::FossFab::Command_CommandCode value) {
  
  command_code_ = value;
  // @@protoc_insertion_point(field_set:FossFab.Command.command_code)
}

// repeated .FossFab.HeadPosition positions = 2;
int Command::positions_size() const {
  return positions_.size();
}
void Command::clear_positions() {
  positions_.Clear();
}
const ::FossFab::HeadPosition& Command::positions(int index) const {
  // @@protoc_insertion_point(field_get:FossFab.Command.positions)
  return positions_.Get(index);
}
::FossFab::HeadPosition* Command::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:FossFab.Command.positions)
  return positions_.Mutable(index);
}
::FossFab::HeadPosition* Command::add_positions() {
  // @@protoc_insertion_point(field_add:FossFab.Command.positions)
  return positions_.Add();
}
::google::protobuf::RepeatedPtrField< ::FossFab::HeadPosition >*
Command::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:FossFab.Command.positions)
  return &positions_;
}
const ::google::protobuf::RepeatedPtrField< ::FossFab::HeadPosition >&
Command::positions() const {
  // @@protoc_insertion_point(field_list:FossFab.Command.positions)
  return positions_;
}

// optional .FossFab.Mesh mesh = 3;
bool Command::has_mesh() const {
  return !_is_default_instance_ && mesh_ != NULL;
}
void Command::clear_mesh() {
  if (GetArenaNoVirtual() == NULL && mesh_ != NULL) delete mesh_;
  mesh_ = NULL;
}
const ::FossFab::Mesh& Command::mesh() const {
  // @@protoc_insertion_point(field_get:FossFab.Command.mesh)
  return mesh_ != NULL ? *mesh_ : *default_instance_->mesh_;
}
::FossFab::Mesh* Command::mutable_mesh() {
  
  if (mesh_ == NULL) {
    mesh_ = new ::FossFab::Mesh;
  }
  // @@protoc_insertion_point(field_mutable:FossFab.Command.mesh)
  return mesh_;
}
::FossFab::Mesh* Command::release_mesh() {
  // @@protoc_insertion_point(field_release:FossFab.Command.mesh)
  
  ::FossFab::Mesh* temp = mesh_;
  mesh_ = NULL;
  return temp;
}
void Command::set_allocated_mesh(::FossFab::Mesh* mesh) {
  delete mesh_;
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FossFab.Command.mesh)
}

// optional bool extrude = 4;
void Command::clear_extrude() {
  extrude_ = false;
}
 bool Command::extrude() const {
  // @@protoc_insertion_point(field_get:FossFab.Command.extrude)
  return extrude_;
}
 void Command::set_extrude(bool value) {
  
  extrude_ = value;
  // @@protoc_insertion_point(field_set:FossFab.Command.extrude)
}

// repeated .FossFab.Slice slices = 5;
int Command::slices_size() const {
  return slices_.size();
}
void Command::clear_slices() {
  slices_.Clear();
}
const ::FossFab::Slice& Command::slices(int index) const {
  // @@protoc_insertion_point(field_get:FossFab.Command.slices)
  return slices_.Get(index);
}
::FossFab::Slice* Command::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:FossFab.Command.slices)
  return slices_.Mutable(index);
}
::FossFab::Slice* Command::add_slices() {
  // @@protoc_insertion_point(field_add:FossFab.Command.slices)
  return slices_.Add();
}
::google::protobuf::RepeatedPtrField< ::FossFab::Slice >*
Command::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:FossFab.Command.slices)
  return &slices_;
}
const ::google::protobuf::RepeatedPtrField< ::FossFab::Slice >&
Command::slices() const {
  // @@protoc_insertion_point(field_list:FossFab.Command.slices)
  return slices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Slice::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Slice::Slice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FossFab.Slice)
}

void Slice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Slice::Slice(const Slice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FossFab.Slice)
}

void Slice::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:FossFab.Slice)
  SharedDtor();
}

void Slice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Slice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Slice_descriptor_;
}

const Slice& Slice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fossfab_2eproto();
  return *default_instance_;
}

Slice* Slice::default_instance_ = NULL;

Slice* Slice::New(::google::protobuf::Arena* arena) const {
  Slice* n = new Slice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:FossFab.Slice)
  positions_.Clear();
}

bool Slice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FossFab.Slice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FossFab.Vector3 positions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_positions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FossFab.Slice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FossFab.Slice)
  return false;
#undef DO_
}

void Slice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FossFab.Slice)
  // repeated .FossFab.Vector3 positions = 1;
  for (unsigned int i = 0, n = this->positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->positions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:FossFab.Slice)
}

::google::protobuf::uint8* Slice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FossFab.Slice)
  // repeated .FossFab.Vector3 positions = 1;
  for (unsigned int i = 0, n = this->positions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->positions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FossFab.Slice)
  return target;
}

int Slice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FossFab.Slice)
  int total_size = 0;

  // repeated .FossFab.Vector3 positions = 1;
  total_size += 1 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FossFab.Slice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Slice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Slice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FossFab.Slice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FossFab.Slice)
    MergeFrom(*source);
  }
}

void Slice::MergeFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FossFab.Slice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  positions_.MergeFrom(from.positions_);
}

void Slice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FossFab.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slice::CopyFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FossFab.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {

  return true;
}

void Slice::Swap(Slice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Slice::InternalSwap(Slice* other) {
  positions_.UnsafeArenaSwap(&other->positions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Slice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Slice_descriptor_;
  metadata.reflection = Slice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Slice

// repeated .FossFab.Vector3 positions = 1;
int Slice::positions_size() const {
  return positions_.size();
}
void Slice::clear_positions() {
  positions_.Clear();
}
const ::FossFab::Vector3& Slice::positions(int index) const {
  // @@protoc_insertion_point(field_get:FossFab.Slice.positions)
  return positions_.Get(index);
}
::FossFab::Vector3* Slice::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:FossFab.Slice.positions)
  return positions_.Mutable(index);
}
::FossFab::Vector3* Slice::add_positions() {
  // @@protoc_insertion_point(field_add:FossFab.Slice.positions)
  return positions_.Add();
}
::google::protobuf::RepeatedPtrField< ::FossFab::Vector3 >*
Slice::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:FossFab.Slice.positions)
  return &positions_;
}
const ::google::protobuf::RepeatedPtrField< ::FossFab::Vector3 >&
Slice::positions() const {
  // @@protoc_insertion_point(field_list:FossFab.Slice.positions)
  return positions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Triangle::kVertex1FieldNumber;
const int Triangle::kVertex2FieldNumber;
const int Triangle::kVertex3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Triangle::Triangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FossFab.Triangle)
}

void Triangle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  vertex1_ = const_cast< ::FossFab::Vector3*>(&::FossFab::Vector3::default_instance());
  vertex2_ = const_cast< ::FossFab::Vector3*>(&::FossFab::Vector3::default_instance());
  vertex3_ = const_cast< ::FossFab::Vector3*>(&::FossFab::Vector3::default_instance());
}

Triangle::Triangle(const Triangle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FossFab.Triangle)
}

void Triangle::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  vertex1_ = NULL;
  vertex2_ = NULL;
  vertex3_ = NULL;
}

Triangle::~Triangle() {
  // @@protoc_insertion_point(destructor:FossFab.Triangle)
  SharedDtor();
}

void Triangle::SharedDtor() {
  if (this != default_instance_) {
    delete vertex1_;
    delete vertex2_;
    delete vertex3_;
  }
}

void Triangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Triangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Triangle_descriptor_;
}

const Triangle& Triangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fossfab_2eproto();
  return *default_instance_;
}

Triangle* Triangle::default_instance_ = NULL;

Triangle* Triangle::New(::google::protobuf::Arena* arena) const {
  Triangle* n = new Triangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:FossFab.Triangle)
  if (GetArenaNoVirtual() == NULL && vertex1_ != NULL) delete vertex1_;
  vertex1_ = NULL;
  if (GetArenaNoVirtual() == NULL && vertex2_ != NULL) delete vertex2_;
  vertex2_ = NULL;
  if (GetArenaNoVirtual() == NULL && vertex3_ != NULL) delete vertex3_;
  vertex3_ = NULL;
}

bool Triangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FossFab.Triangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FossFab.Vector3 vertex1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertex1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertex2;
        break;
      }

      // optional .FossFab.Vector3 vertex2 = 2;
      case 2: {
        if (tag == 18) {
         parse_vertex2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertex2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vertex3;
        break;
      }

      // optional .FossFab.Vector3 vertex3 = 3;
      case 3: {
        if (tag == 26) {
         parse_vertex3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertex3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FossFab.Triangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FossFab.Triangle)
  return false;
#undef DO_
}

void Triangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FossFab.Triangle)
  // optional .FossFab.Vector3 vertex1 = 1;
  if (this->has_vertex1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->vertex1_, output);
  }

  // optional .FossFab.Vector3 vertex2 = 2;
  if (this->has_vertex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vertex2_, output);
  }

  // optional .FossFab.Vector3 vertex3 = 3;
  if (this->has_vertex3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vertex3_, output);
  }

  // @@protoc_insertion_point(serialize_end:FossFab.Triangle)
}

::google::protobuf::uint8* Triangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FossFab.Triangle)
  // optional .FossFab.Vector3 vertex1 = 1;
  if (this->has_vertex1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->vertex1_, false, target);
  }

  // optional .FossFab.Vector3 vertex2 = 2;
  if (this->has_vertex2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vertex2_, false, target);
  }

  // optional .FossFab.Vector3 vertex3 = 3;
  if (this->has_vertex3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vertex3_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FossFab.Triangle)
  return target;
}

int Triangle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FossFab.Triangle)
  int total_size = 0;

  // optional .FossFab.Vector3 vertex1 = 1;
  if (this->has_vertex1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vertex1_);
  }

  // optional .FossFab.Vector3 vertex2 = 2;
  if (this->has_vertex2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vertex2_);
  }

  // optional .FossFab.Vector3 vertex3 = 3;
  if (this->has_vertex3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vertex3_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Triangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FossFab.Triangle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Triangle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Triangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FossFab.Triangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FossFab.Triangle)
    MergeFrom(*source);
  }
}

void Triangle::MergeFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FossFab.Triangle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_vertex1()) {
    mutable_vertex1()->::FossFab::Vector3::MergeFrom(from.vertex1());
  }
  if (from.has_vertex2()) {
    mutable_vertex2()->::FossFab::Vector3::MergeFrom(from.vertex2());
  }
  if (from.has_vertex3()) {
    mutable_vertex3()->::FossFab::Vector3::MergeFrom(from.vertex3());
  }
}

void Triangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FossFab.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Triangle::CopyFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FossFab.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Triangle::IsInitialized() const {

  return true;
}

void Triangle::Swap(Triangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Triangle::InternalSwap(Triangle* other) {
  std::swap(vertex1_, other->vertex1_);
  std::swap(vertex2_, other->vertex2_);
  std::swap(vertex3_, other->vertex3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Triangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Triangle_descriptor_;
  metadata.reflection = Triangle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Triangle

// optional .FossFab.Vector3 vertex1 = 1;
bool Triangle::has_vertex1() const {
  return !_is_default_instance_ && vertex1_ != NULL;
}
void Triangle::clear_vertex1() {
  if (GetArenaNoVirtual() == NULL && vertex1_ != NULL) delete vertex1_;
  vertex1_ = NULL;
}
const ::FossFab::Vector3& Triangle::vertex1() const {
  // @@protoc_insertion_point(field_get:FossFab.Triangle.vertex1)
  return vertex1_ != NULL ? *vertex1_ : *default_instance_->vertex1_;
}
::FossFab::Vector3* Triangle::mutable_vertex1() {
  
  if (vertex1_ == NULL) {
    vertex1_ = new ::FossFab::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:FossFab.Triangle.vertex1)
  return vertex1_;
}
::FossFab::Vector3* Triangle::release_vertex1() {
  // @@protoc_insertion_point(field_release:FossFab.Triangle.vertex1)
  
  ::FossFab::Vector3* temp = vertex1_;
  vertex1_ = NULL;
  return temp;
}
void Triangle::set_allocated_vertex1(::FossFab::Vector3* vertex1) {
  delete vertex1_;
  vertex1_ = vertex1;
  if (vertex1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FossFab.Triangle.vertex1)
}

// optional .FossFab.Vector3 vertex2 = 2;
bool Triangle::has_vertex2() const {
  return !_is_default_instance_ && vertex2_ != NULL;
}
void Triangle::clear_vertex2() {
  if (GetArenaNoVirtual() == NULL && vertex2_ != NULL) delete vertex2_;
  vertex2_ = NULL;
}
const ::FossFab::Vector3& Triangle::vertex2() const {
  // @@protoc_insertion_point(field_get:FossFab.Triangle.vertex2)
  return vertex2_ != NULL ? *vertex2_ : *default_instance_->vertex2_;
}
::FossFab::Vector3* Triangle::mutable_vertex2() {
  
  if (vertex2_ == NULL) {
    vertex2_ = new ::FossFab::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:FossFab.Triangle.vertex2)
  return vertex2_;
}
::FossFab::Vector3* Triangle::release_vertex2() {
  // @@protoc_insertion_point(field_release:FossFab.Triangle.vertex2)
  
  ::FossFab::Vector3* temp = vertex2_;
  vertex2_ = NULL;
  return temp;
}
void Triangle::set_allocated_vertex2(::FossFab::Vector3* vertex2) {
  delete vertex2_;
  vertex2_ = vertex2;
  if (vertex2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FossFab.Triangle.vertex2)
}

// optional .FossFab.Vector3 vertex3 = 3;
bool Triangle::has_vertex3() const {
  return !_is_default_instance_ && vertex3_ != NULL;
}
void Triangle::clear_vertex3() {
  if (GetArenaNoVirtual() == NULL && vertex3_ != NULL) delete vertex3_;
  vertex3_ = NULL;
}
const ::FossFab::Vector3& Triangle::vertex3() const {
  // @@protoc_insertion_point(field_get:FossFab.Triangle.vertex3)
  return vertex3_ != NULL ? *vertex3_ : *default_instance_->vertex3_;
}
::FossFab::Vector3* Triangle::mutable_vertex3() {
  
  if (vertex3_ == NULL) {
    vertex3_ = new ::FossFab::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:FossFab.Triangle.vertex3)
  return vertex3_;
}
::FossFab::Vector3* Triangle::release_vertex3() {
  // @@protoc_insertion_point(field_release:FossFab.Triangle.vertex3)
  
  ::FossFab::Vector3* temp = vertex3_;
  vertex3_ = NULL;
  return temp;
}
void Triangle::set_allocated_vertex3(::FossFab::Vector3* vertex3) {
  delete vertex3_;
  vertex3_ = vertex3;
  if (vertex3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FossFab.Triangle.vertex3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kTrianglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FossFab.Mesh)
}

void Mesh::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FossFab.Mesh)
}

void Mesh::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:FossFab.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_descriptor_;
}

const Mesh& Mesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fossfab_2eproto();
  return *default_instance_;
}

Mesh* Mesh::default_instance_ = NULL;

Mesh* Mesh::New(::google::protobuf::Arena* arena) const {
  Mesh* n = new Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:FossFab.Mesh)
  triangles_.Clear();
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FossFab.Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FossFab.Triangle triangles = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_triangles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_triangles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_triangles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FossFab.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FossFab.Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FossFab.Mesh)
  // repeated .FossFab.Triangle triangles = 1;
  for (unsigned int i = 0, n = this->triangles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->triangles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:FossFab.Mesh)
}

::google::protobuf::uint8* Mesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FossFab.Mesh)
  // repeated .FossFab.Triangle triangles = 1;
  for (unsigned int i = 0, n = this->triangles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->triangles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FossFab.Mesh)
  return target;
}

int Mesh::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FossFab.Mesh)
  int total_size = 0;

  // repeated .FossFab.Triangle triangles = 1;
  total_size += 1 * this->triangles_size();
  for (int i = 0; i < this->triangles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triangles(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FossFab.Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mesh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FossFab.Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FossFab.Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FossFab.Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  triangles_.MergeFrom(from.triangles_);
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FossFab.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FossFab.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {

  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  triangles_.UnsafeArenaSwap(&other->triangles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_descriptor_;
  metadata.reflection = Mesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh

// repeated .FossFab.Triangle triangles = 1;
int Mesh::triangles_size() const {
  return triangles_.size();
}
void Mesh::clear_triangles() {
  triangles_.Clear();
}
const ::FossFab::Triangle& Mesh::triangles(int index) const {
  // @@protoc_insertion_point(field_get:FossFab.Mesh.triangles)
  return triangles_.Get(index);
}
::FossFab::Triangle* Mesh::mutable_triangles(int index) {
  // @@protoc_insertion_point(field_mutable:FossFab.Mesh.triangles)
  return triangles_.Mutable(index);
}
::FossFab::Triangle* Mesh::add_triangles() {
  // @@protoc_insertion_point(field_add:FossFab.Mesh.triangles)
  return triangles_.Add();
}
::google::protobuf::RepeatedPtrField< ::FossFab::Triangle >*
Mesh::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:FossFab.Mesh.triangles)
  return &triangles_;
}
const ::google::protobuf::RepeatedPtrField< ::FossFab::Triangle >&
Mesh::triangles() const {
  // @@protoc_insertion_point(field_list:FossFab.Mesh.triangles)
  return triangles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FossFab.Vector3)
}

void Vector3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FossFab.Vector3)
}

void Vector3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:FossFab.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fossfab_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:FossFab.Vector3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FossFab.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FossFab.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FossFab.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FossFab.Vector3)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:FossFab.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FossFab.Vector3)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FossFab.Vector3)
  return target;
}

int Vector3::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FossFab.Vector3)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FossFab.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FossFab.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FossFab.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FossFab.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FossFab.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FossFab.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional float x = 1;
void Vector3::clear_x() {
  x_ = 0;
}
 float Vector3::x() const {
  // @@protoc_insertion_point(field_get:FossFab.Vector3.x)
  return x_;
}
 void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:FossFab.Vector3.x)
}

// optional float y = 2;
void Vector3::clear_y() {
  y_ = 0;
}
 float Vector3::y() const {
  // @@protoc_insertion_point(field_get:FossFab.Vector3.y)
  return y_;
}
 void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:FossFab.Vector3.y)
}

// optional float z = 3;
void Vector3::clear_z() {
  z_ = 0;
}
 float Vector3::z() const {
  // @@protoc_insertion_point(field_get:FossFab.Vector3.z)
  return z_;
}
 void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:FossFab.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadPosition::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadPosition::HeadPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FossFab.HeadPosition)
}

void HeadPosition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pos_ = const_cast< ::FossFab::Vector3*>(&::FossFab::Vector3::default_instance());
}

HeadPosition::HeadPosition(const HeadPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FossFab.HeadPosition)
}

void HeadPosition::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pos_ = NULL;
}

HeadPosition::~HeadPosition() {
  // @@protoc_insertion_point(destructor:FossFab.HeadPosition)
  SharedDtor();
}

void HeadPosition::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void HeadPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadPosition_descriptor_;
}

const HeadPosition& HeadPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fossfab_2eproto();
  return *default_instance_;
}

HeadPosition* HeadPosition::default_instance_ = NULL;

HeadPosition* HeadPosition::New(::google::protobuf::Arena* arena) const {
  HeadPosition* n = new HeadPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeadPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:FossFab.HeadPosition)
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}

bool HeadPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FossFab.HeadPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FossFab.Vector3 pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FossFab.HeadPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FossFab.HeadPosition)
  return false;
#undef DO_
}

void HeadPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FossFab.HeadPosition)
  // optional .FossFab.Vector3 pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // @@protoc_insertion_point(serialize_end:FossFab.HeadPosition)
}

::google::protobuf::uint8* HeadPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FossFab.HeadPosition)
  // optional .FossFab.Vector3 pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FossFab.HeadPosition)
  return target;
}

int HeadPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FossFab.HeadPosition)
  int total_size = 0;

  // optional .FossFab.Vector3 pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FossFab.HeadPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeadPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeadPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FossFab.HeadPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FossFab.HeadPosition)
    MergeFrom(*source);
  }
}

void HeadPosition::MergeFrom(const HeadPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FossFab.HeadPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_pos()) {
    mutable_pos()->::FossFab::Vector3::MergeFrom(from.pos());
  }
}

void HeadPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FossFab.HeadPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadPosition::CopyFrom(const HeadPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FossFab.HeadPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadPosition::IsInitialized() const {

  return true;
}

void HeadPosition::Swap(HeadPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadPosition::InternalSwap(HeadPosition* other) {
  std::swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeadPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadPosition_descriptor_;
  metadata.reflection = HeadPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeadPosition

// optional .FossFab.Vector3 pos = 1;
bool HeadPosition::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void HeadPosition::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::FossFab::Vector3& HeadPosition::pos() const {
  // @@protoc_insertion_point(field_get:FossFab.HeadPosition.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::FossFab::Vector3* HeadPosition::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::FossFab::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:FossFab.HeadPosition.pos)
  return pos_;
}
::FossFab::Vector3* HeadPosition::release_pos() {
  // @@protoc_insertion_point(field_release:FossFab.HeadPosition.pos)
  
  ::FossFab::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
void HeadPosition::set_allocated_pos(::FossFab::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FossFab.HeadPosition.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace FossFab

// @@protoc_insertion_point(global_scope)
