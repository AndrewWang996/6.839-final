// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fossfab.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FossFab {

  /// <summary>Holder for reflection information generated from fossfab.proto</summary>
  public static partial class FossfabReflection {

    #region Descriptor
    /// <summary>File descriptor for fossfab.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FossfabReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1mb3NzZmFiLnByb3RvEgdGb3NzRmFiIo4CCgdDb21tYW5kEjIKDGNvbW1h",
            "bmRfY29kZRgBIAEoDjIcLkZvc3NGYWIuQ29tbWFuZC5Db21tYW5kQ29kZRIo",
            "Cglwb3NpdGlvbnMYAiADKAsyFS5Gb3NzRmFiLkhlYWRQb3NpdGlvbhIbCgRt",
            "ZXNoGAMgASgLMg0uRm9zc0ZhYi5NZXNoEg8KB2V4dHJ1ZGUYBCABKAgSHgoG",
            "c2xpY2VzGAUgAygLMg4uRm9zc0ZhYi5TbGljZSJXCgtDb21tYW5kQ29kZRII",
            "CgRNT1ZFEAASDwoLUkVOREVSX01FU0gQARIPCgtSRU5ERVJfUEFUSBACEhEK",
            "DVJFTkRFUl9TTElDRVMQAxIJCgVSRVNFVBAEIiwKBVNsaWNlEiMKCXBvc2l0",
            "aW9ucxgBIAMoCzIQLkZvc3NGYWIuVmVjdG9yMyJzCghUcmlhbmdsZRIhCgd2",
            "ZXJ0ZXgxGAEgASgLMhAuRm9zc0ZhYi5WZWN0b3IzEiEKB3ZlcnRleDIYAiAB",
            "KAsyEC5Gb3NzRmFiLlZlY3RvcjMSIQoHdmVydGV4MxgDIAEoCzIQLkZvc3NG",
            "YWIuVmVjdG9yMyIsCgRNZXNoEiQKCXRyaWFuZ2xlcxgBIAMoCzIRLkZvc3NG",
            "YWIuVHJpYW5nbGUiKgoHVmVjdG9yMxIJCgF4GAEgASgCEgkKAXkYAiABKAIS",
            "CQoBehgDIAEoAiItCgxIZWFkUG9zaXRpb24SHQoDcG9zGAEgASgLMhAuRm9z",
            "c0ZhYi5WZWN0b3IzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FossFab.Command), global::FossFab.Command.Parser, new[]{ "CommandCode", "Positions", "Mesh", "Extrude", "Slices" }, null, new[]{ typeof(global::FossFab.Command.Types.CommandCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FossFab.Slice), global::FossFab.Slice.Parser, new[]{ "Positions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FossFab.Triangle), global::FossFab.Triangle.Parser, new[]{ "Vertex1", "Vertex2", "Vertex3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FossFab.Mesh), global::FossFab.Mesh.Parser, new[]{ "Triangles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FossFab.Vector3), global::FossFab.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FossFab.HeadPosition), global::FossFab.HeadPosition.Parser, new[]{ "Pos" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FossFab.FossfabReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      commandCode_ = other.commandCode_;
      positions_ = other.positions_.Clone();
      Mesh = other.mesh_ != null ? other.Mesh.Clone() : null;
      extrude_ = other.extrude_;
      slices_ = other.slices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "command_code" field.</summary>
    public const int CommandCodeFieldNumber = 1;
    private global::FossFab.Command.Types.CommandCode commandCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FossFab.Command.Types.CommandCode CommandCode {
      get { return commandCode_; }
      set {
        commandCode_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::FossFab.HeadPosition> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(18, global::FossFab.HeadPosition.Parser);
    private readonly pbc::RepeatedField<global::FossFab.HeadPosition> positions_ = new pbc::RepeatedField<global::FossFab.HeadPosition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FossFab.HeadPosition> Positions {
      get { return positions_; }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 3;
    private global::FossFab.Mesh mesh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FossFab.Mesh Mesh {
      get { return mesh_; }
      set {
        mesh_ = value;
      }
    }

    /// <summary>Field number for the "extrude" field.</summary>
    public const int ExtrudeFieldNumber = 4;
    private bool extrude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Extrude {
      get { return extrude_; }
      set {
        extrude_ = value;
      }
    }

    /// <summary>Field number for the "slices" field.</summary>
    public const int SlicesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::FossFab.Slice> _repeated_slices_codec
        = pb::FieldCodec.ForMessage(42, global::FossFab.Slice.Parser);
    private readonly pbc::RepeatedField<global::FossFab.Slice> slices_ = new pbc::RepeatedField<global::FossFab.Slice>();
    /// <summary>
    /// similar to headpositions but let's keep them separate for now
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FossFab.Slice> Slices {
      get { return slices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommandCode != other.CommandCode) return false;
      if(!positions_.Equals(other.positions_)) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      if (Extrude != other.Extrude) return false;
      if(!slices_.Equals(other.slices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommandCode != 0) hash ^= CommandCode.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (mesh_ != null) hash ^= Mesh.GetHashCode();
      if (Extrude != false) hash ^= Extrude.GetHashCode();
      hash ^= slices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommandCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CommandCode);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (mesh_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mesh);
      }
      if (Extrude != false) {
        output.WriteRawTag(32);
        output.WriteBool(Extrude);
      }
      slices_.WriteTo(output, _repeated_slices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommandCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandCode);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (mesh_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      if (Extrude != false) {
        size += 1 + 1;
      }
      size += slices_.CalculateSize(_repeated_slices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      if (other.CommandCode != 0) {
        CommandCode = other.CommandCode;
      }
      positions_.Add(other.positions_);
      if (other.mesh_ != null) {
        if (mesh_ == null) {
          mesh_ = new global::FossFab.Mesh();
        }
        Mesh.MergeFrom(other.Mesh);
      }
      if (other.Extrude != false) {
        Extrude = other.Extrude;
      }
      slices_.Add(other.slices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            commandCode_ = (global::FossFab.Command.Types.CommandCode) input.ReadEnum();
            break;
          }
          case 18: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
          case 26: {
            if (mesh_ == null) {
              mesh_ = new global::FossFab.Mesh();
            }
            input.ReadMessage(mesh_);
            break;
          }
          case 32: {
            Extrude = input.ReadBool();
            break;
          }
          case 42: {
            slices_.AddEntriesFrom(input, _repeated_slices_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Command message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CommandCode {
        [pbr::OriginalName("MOVE")] Move = 0,
        [pbr::OriginalName("RENDER_MESH")] RenderMesh = 1,
        [pbr::OriginalName("RENDER_PATH")] RenderPath = 2,
        [pbr::OriginalName("RENDER_SLICES")] RenderSlices = 3,
        [pbr::OriginalName("RESET")] Reset = 4,
      }

    }
    #endregion

  }

  public sealed partial class Slice : pb::IMessage<Slice> {
    private static readonly pb::MessageParser<Slice> _parser = new pb::MessageParser<Slice>(() => new Slice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Slice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FossFab.FossfabReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Slice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Slice(Slice other) : this() {
      positions_ = other.positions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Slice Clone() {
      return new Slice(this);
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::FossFab.Vector3> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(10, global::FossFab.Vector3.Parser);
    private readonly pbc::RepeatedField<global::FossFab.Vector3> positions_ = new pbc::RepeatedField<global::FossFab.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FossFab.Vector3> Positions {
      get { return positions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Slice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Slice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!positions_.Equals(other.positions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= positions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      positions_.WriteTo(output, _repeated_positions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += positions_.CalculateSize(_repeated_positions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Slice other) {
      if (other == null) {
        return;
      }
      positions_.Add(other.positions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Triangle : pb::IMessage<Triangle> {
    private static readonly pb::MessageParser<Triangle> _parser = new pb::MessageParser<Triangle>(() => new Triangle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Triangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FossFab.FossfabReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Triangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Triangle(Triangle other) : this() {
      Vertex1 = other.vertex1_ != null ? other.Vertex1.Clone() : null;
      Vertex2 = other.vertex2_ != null ? other.Vertex2.Clone() : null;
      Vertex3 = other.vertex3_ != null ? other.Vertex3.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Triangle Clone() {
      return new Triangle(this);
    }

    /// <summary>Field number for the "vertex1" field.</summary>
    public const int Vertex1FieldNumber = 1;
    private global::FossFab.Vector3 vertex1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FossFab.Vector3 Vertex1 {
      get { return vertex1_; }
      set {
        vertex1_ = value;
      }
    }

    /// <summary>Field number for the "vertex2" field.</summary>
    public const int Vertex2FieldNumber = 2;
    private global::FossFab.Vector3 vertex2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FossFab.Vector3 Vertex2 {
      get { return vertex2_; }
      set {
        vertex2_ = value;
      }
    }

    /// <summary>Field number for the "vertex3" field.</summary>
    public const int Vertex3FieldNumber = 3;
    private global::FossFab.Vector3 vertex3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FossFab.Vector3 Vertex3 {
      get { return vertex3_; }
      set {
        vertex3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Triangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Triangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Vertex1, other.Vertex1)) return false;
      if (!object.Equals(Vertex2, other.Vertex2)) return false;
      if (!object.Equals(Vertex3, other.Vertex3)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (vertex1_ != null) hash ^= Vertex1.GetHashCode();
      if (vertex2_ != null) hash ^= Vertex2.GetHashCode();
      if (vertex3_ != null) hash ^= Vertex3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (vertex1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Vertex1);
      }
      if (vertex2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Vertex2);
      }
      if (vertex3_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vertex3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (vertex1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vertex1);
      }
      if (vertex2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vertex2);
      }
      if (vertex3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vertex3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Triangle other) {
      if (other == null) {
        return;
      }
      if (other.vertex1_ != null) {
        if (vertex1_ == null) {
          vertex1_ = new global::FossFab.Vector3();
        }
        Vertex1.MergeFrom(other.Vertex1);
      }
      if (other.vertex2_ != null) {
        if (vertex2_ == null) {
          vertex2_ = new global::FossFab.Vector3();
        }
        Vertex2.MergeFrom(other.Vertex2);
      }
      if (other.vertex3_ != null) {
        if (vertex3_ == null) {
          vertex3_ = new global::FossFab.Vector3();
        }
        Vertex3.MergeFrom(other.Vertex3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (vertex1_ == null) {
              vertex1_ = new global::FossFab.Vector3();
            }
            input.ReadMessage(vertex1_);
            break;
          }
          case 18: {
            if (vertex2_ == null) {
              vertex2_ = new global::FossFab.Vector3();
            }
            input.ReadMessage(vertex2_);
            break;
          }
          case 26: {
            if (vertex3_ == null) {
              vertex3_ = new global::FossFab.Vector3();
            }
            input.ReadMessage(vertex3_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FossFab.FossfabReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh(Mesh other) : this() {
      triangles_ = other.triangles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "triangles" field.</summary>
    public const int TrianglesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::FossFab.Triangle> _repeated_triangles_codec
        = pb::FieldCodec.ForMessage(10, global::FossFab.Triangle.Parser);
    private readonly pbc::RepeatedField<global::FossFab.Triangle> triangles_ = new pbc::RepeatedField<global::FossFab.Triangle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FossFab.Triangle> Triangles {
      get { return triangles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!triangles_.Equals(other.triangles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= triangles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      triangles_.WriteTo(output, _repeated_triangles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += triangles_.CalculateSize(_repeated_triangles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      triangles_.Add(other.triangles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            triangles_.AddEntriesFrom(input, _repeated_triangles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FossFab.FossfabReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeadPosition : pb::IMessage<HeadPosition> {
    private static readonly pb::MessageParser<HeadPosition> _parser = new pb::MessageParser<HeadPosition>(() => new HeadPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeadPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FossFab.FossfabReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadPosition(HeadPosition other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadPosition Clone() {
      return new HeadPosition(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::FossFab.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FossFab.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeadPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeadPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeadPosition other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::FossFab.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::FossFab.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
